spring.application.name=backend
spring.jpa.hibernate.ddl-auto=update
# spring.datasource.url=jdbc:postgresql://localhost:5433/sammysbrow-db
# spring.datasource.username=super_admin
# spring.datasource.password=the usual 100!!
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

# Every time you make a request (e.g. GET/POST), the app opens a new DB connection → talks to the DB → then closes the connection.

# This is slow and wastes resources. Databases like PostgreSQL limit the number of simultaneous connections (especially on Supabase).

# Instead use Hikari:

# Keeps a pool (a small set) of open, reusable connections.

# When your app needs to talk to the DB, it borrows an existing connection from the pool.

# After use, the connection is returned to the pool — not closed.

# This is much faster, more resource-efficient, and prevents hitting the max connections
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.initialization-fail-timeout=0
spring.datasource.hikari.validation-timeout=5000   # 5 seconds to validate connections

